{"name":"kendo.mobile.ui.ListView","children":[{"name":"Events","children":[{"name":"itemChange","children":[{"name":"Example"}],"description":"Fires when a new item is added to the listview (usually in virtual mode)."},{"name":"dataBinding","children":[{"name":"Example"}],"description":"Fires when the ListView is about to be rendered."},{"name":"dataBound","children":[{"name":"Example"}],"description":"Fires when the ListView has received data from the DataSource."},{"name":"click","children":[{"name":"Event Data","children":[{"name":"e.button `kendo.mobile.ui.Button`"},{"name":"e.dataItem `Object`"},{"name":"e.target `jQuery`"},{"name":"e.item `jQuery`"}]},{"name":"Accessing dataItem in event"},{"name":"Example"}],"description":"Fires when item is tapped.","args":["e.button","e.dataItem","e.target","e.item"]}]},{"name":"Methods","children":[{"name":"setDataSource","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"dataSource `kendo.data.DataSource`"}]}],"parameters":[{"name":"dataSource `kendo.data.DataSource`"}],"description":"Sets the DataSource of an existing ListView and rebinds it."},{"name":"refresh","children":[{"name":"example"}],"parameters":[],"description":"Repaints the listview (works only in databound mode)."},{"name":"items","children":[{"name":"Example"},{"name":"Returns"}],"parameters":[],"description":"Get the listview DOM element items"},{"name":"destroy","children":[{"name":"Example"}],"parameters":[],"description":"Prepares the **ListView** for safe removal from DOM. Detaches all event handlers and removes jQuery.data attributes to avoid memory leaks. Calls destroy method of any child Kendo widgets.> **Important:** This method does not remove the ListView element from DOM."},{"name":"setDataItem","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"dataItem `kendo.data.Model`"},{"name":"item `jQuery`"}]}],"parameters":[{"name":"dataItem `kendo.data.Model`","description":"The new dataItem"},{"name":"item `jQuery`","description":"The listview item to update"}],"description":"Re-renders the given listview item with the new dataItem provided. In order for the method to work as expected, the data items should be of type kendo.data.Model."},{"name":"remove","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"dataItems `Array`"}]}],"parameters":[{"name":"dataItems `Array`"}],"description":"Removes the listview items which are rendered with the passed data items."},{"name":"replace","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"dataItems `Array`"}]}],"parameters":[{"name":"dataItems `Array`"}],"description":"Replaces the contents of the listview with the passed rendered data items."},{"name":"prepend","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"dataItems `Array`"}]}],"parameters":[{"name":"dataItems `Array`"}],"description":"Prepends new items generated by rendering the given data items with the listview template to the top of the listview."},{"name":"append","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"dataItems `Array`"}]}],"parameters":[{"name":"dataItems `Array`"}],"description":"Appends new items generated by rendering the given data items with the listview template to the bottom of the listview."}]},{"name":"Configuration","children":[{"name":"virtualViewSize","children":[{"name":"Example - virtualization using local data"}],"type":"Number","description":" Used when virtualization of local data is used. This configuration is needed to determine the items displayed, since the datasource does not (and should not) have paging set."},{"name":"filterable.operator","children":[{"name":"Example - enabled filtering with comparison operator defined"}],"type":"String","default":" \"startsWith\"","description":"Specifies the comparison operator used in the filter expression. The operator must be one of the available DataSource filter [operators](/api/framework/datasource#configuration-filter.operator)."},{"name":"filterable.ignoreCase","children":[{"name":"Example - enabled case insensitive filtering"}],"type":"Boolean","default":" false","description":"Specifies whether the filter expression must be case sensitive or not."},{"name":"filterable.field","children":[{"name":"Example - enabled filtering with field defined"},{"name":"Example - enabled filtering with default field configuration"}],"type":"String","description":"Specifies the field which will be used in the filter expression. The default field value is `undefined` which is usefull when the list view is bound to a list of primitive types.If this is not case the field *must* be defined."},{"name":"filterable.autoFilter","children":[{"name":"Example - enabled filtering with auto filtering disabled"}],"type":"Boolean","default":" true","description":"Indicates whether filtering should be performed on every key up event or when the focus is moved out of the filter input."},{"name":"filterable.placeholder","children":[{"name":"Example - enabled filtering with custom text for the input placeholder"}],"type":"String","default":" \"Search...\"","description":"Placeholder text for search input."},{"name":"filterable","children":[{"name":"Example - enabled filtering"}],"type":["Boolean "," Object"],"default":" false","description":"Indicates whether the filter input must be visible or not.> **Important:** When the filter is applied it will remove all previous filter expressions applied to the DataSource."},{"name":"type","children":[{"name":"Example"}],"type":"String","default":" \"flat\"","description":"The type of the control. Can be either `flat` (default) or group. Determined automatically in databound mode."},{"name":"template","children":[{"name":"Example:"}],"type":["String","Function"],"default":" \"#:data#\"","description":"The item template."},{"name":"style","children":[{"name":"Example"}],"type":"String","default":" \"\"","description":"The style of the widget. Can be either empty string(\"\"), or `inset`."},{"name":"pullParameters","children":[{"name":"Parameters","children":[{"name":"item `Object`"}]},{"name":"Example"}],"type":"Function","description":"A callback function used when the 'pullToRefresh' option is enabled. The result of the function will be send as additional parameters to the DataSource's `next` method.**Notice:** When the listview is in a *virtual mode*, the pull to refresh action **removes** the previously loaded items in the listview (instead of appending new records at the top).Previously loaded pages in the DataSource are also discarded."},{"name":"pullToRefresh","children":[{"name":"Example"}],"type":"Boolean","default":" false","description":"If set to true, the listview will reload its data when the user pulls the view over the top limit.> Pull to refresh option is not compatible with native scrolling containers (view with `use-native-scrolling=true` or scroller with `use-native=true` attributes)."},{"name":"messages.releaseTemplate","children":[{"name":"Example"}],"type":"String","default":" \"Release to refresh\"","description":"Text that appears when scroller is pulled beyound the threshold (applies only if `pullToRefresh` is set to `true`)."},{"name":"messages.refreshTemplate","children":[{"name":"Example"}],"type":"String","default":" \"Refreshing\"","description":"Text that appears when ListView is refreshing (applies only if `pullToRefresh` is set to `true`)."},{"name":"messages.pullTemplate","children":[{"name":"Example"}],"type":"String","default":" \"Pull to refresh\"","description":"Text that appears when scroller is pulled (applies only if `pullToRefresh` is set to `true`)."},{"name":"messages.loadMoreText","children":[{"name":"Example"}],"type":"String","default":" \"Press to load more\"","description":"The text of the rendered load-more button (applies only if `loadMore` is set to `true`)."},{"name":"messages","type":"Object","description":"Defines the text of the ListView messages. Used primary for localization."},{"name":"loadMore","children":[{"name":"Example"}],"type":"Boolean","default":" false","description":"If set to `true`, a button is rendered at the bottom of the listview. Tapping it fetches and displays the items from the next page of the DataSource."},{"name":"headerTemplate","children":[{"name":"Example"}],"type":["String","Function"],"default":" \"#:value#\"","description":"The header item template (applicable when the type is set to group)."},{"name":"fixedHeaders","children":[{"name":"Example"}],"type":"Boolean","default":" false","description":"If set to true, the group headers will persist their position when the user scrolls through the listview.Applicable only when the type is set to group, or when binding to grouped DataSource.**Notice:** fixed headers are not supported in virtual mode."},{"name":"endlessScroll","children":[{"name":"Example"}],"type":"Boolean","default":" false","description":"If set to `true`, the listview gets the next page of data when the user scrolls near the bottom of the view."},{"name":"dataSource","children":[{"name":"Example"}],"type":["kendo.data.DataSource "," Object"],"description":"Instance of DataSource or the data that the mobile ListView will be bound to."},{"name":"autoBind","children":[{"name":"Example"}],"type":"Boolean","default":" true","description":"Indicates whether the listview will call read on the DataSource initially. If set to false, the listview will be bound after the DataSource instance `fetch` method is called."},{"name":"appendOnRefresh","children":[{"name":"Example"}],"type":"Boolean","default":" false","description":"Used in combination with `pullToRefresh`. If set to `true`, newly loaded data will be appended on top when refreshing. **Notice:** not applicable if ListView is in a virtual mode."}]}]}