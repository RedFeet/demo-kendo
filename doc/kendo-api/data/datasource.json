{"name":"kendo.data.DataSource","children":[{"name":"Class methods","children":[{"name":"create","children":[{"name":"Example - parsing the dataSource configuration option in a custom widget"},{"name":"Parameters","children":[{"name":"options `Object`"}]},{"name":"Returns"}]}]},{"name":"Events","children":[{"name":"sync","children":[{"name":"Example - subscribe to the \"sync\" event after initialization"},{"name":"Example - subscribe to the \"sync\" event during initialization"},{"name":"Event Data","children":[{"name":"e.sender `kendo.data.DataSource`"}]}],"description":"Fired after the data source saves data item changes. The data source saves the data item changes when the [sync](#methods-sync) method is called.The event handler function context (available via the `this` keyword) will be set to the data source instance.> The `sync` event is fired after all remote requests finish.","args":["e.sender"]},{"name":"requestStart","children":[{"name":"Example - prevent the remote request"},{"name":"Example - subscribe to the \"requestStart\" event after initialization"},{"name":"Example - subscribe to the \"requestStart\" event during initialization"},{"name":"Event Data","children":[{"name":"e.type `String`"},{"name":"e.sender `kendo.data.DataSource`"}]}],"description":"Fired when the data source makes a remote service request.The event handler function context (available via the `this` keyword) will be set to the data source instance.It is possible to prevent the remote request. To achieve this, execute `e.preventDefault()` in the handler function.> This event can be prevented only for `read` requests.","args":["e.type","e.sender"]},{"name":"requestEnd","children":[{"name":"Example - subscribe to the \"requestEnd\" event after initialization"},{"name":"Example - subscribe to the \"requestEnd\" event to catch only \"read\" requests"},{"name":"Example - subscribe to the \"requestEnd\" event during initialization"},{"name":"Event Data","children":[{"name":"e.type `String`"},{"name":"e.sender `kendo.data.DataSource`"},{"name":"e.response `Object`"}]}],"description":"Fired when a remote service request is finished.The event handler function context (available via the `this` keyword) will be set to the data source instance.> The \"response\" argument is not available for local operations.","args":["e.type","e.sender","e.response"]},{"name":"push","children":[{"name":"Example - subscribe to the \"push\" event during initialization"},{"name":"Event Data","children":[{"name":"e.sender `kendo.data.DataSource`"},{"name":"e.type `String`"},{"name":"e.items `Array`"}]}],"description":"Fired when the data source receives a push notification or the `pushCreate`, `pushUpdate` or `pushDestroy` methods are called.","args":["e.sender","e.type","e.items"]},{"name":"error","children":[{"name":"Example - subscribe to the \"error\" event after initialization"},{"name":"Event Data","children":[{"name":"e.xhr `Object`"},{"name":"e.status `String`"},{"name":"e.sender `kendo.data.DataSource`"},{"name":"e.errorThrown `Object` *(optional)*"}]}],"description":"Fired when a request to the remote service fails.The event handler function context (available via the `this` keyword) will be set to the data source instance.> If the [schema.errors](#configuration-schema.errors) option is set and the server response contains that field then the `error` event will be fired. The`errors` field of the event argument will contain the errors returned by the server.","args":["e.xhr","e.status","e.sender","e.errorThrown"]},{"name":"change","children":[{"name":"Example - subscribe to the \"change\" event after initialization"},{"name":"Example - subscribe to the \"change\" event during initialization"},{"name":"Event Data","children":[{"name":"e.items `Array`"},{"name":"e.field `String` *(optional)*"},{"name":"e.action `String` *(optional)*"},{"name":"e.sender `kendo.data.DataSource`"}]}],"description":"Fired when the data source is populated from a JavaScript array or a remote service, a data item is inserted, updated or removed, the data items are paged, sorted, filtered or grouped.The event handler function context (available via the `this` keyword) will be set to the data source instance.","args":["e.items","e.field","e.action","e.sender"]}]},{"name":"Methods","children":[{"name":"view","children":[{"name":"Example - get the paged, sorted and grouped data items"},{"name":"Example - get the paged and sorted data items"},{"name":"Returns"}],"parameters":[],"description":"Returns the data items which correspond to the **current** page, filter, sort and group configuration.Compare with the [`data`](#methods-data) method, which will return data items from **all** pages, if **local** data binding and paging are used.To ensure that data is available this method should be used within the [change](#events-change) event handler or the [fetch](#methods-fetch) method."},{"name":"totalPages","children":[{"name":"Example - get the total number of pages"},{"name":"Returns"}],"parameters":[],"description":"Gets the number of available pages."},{"name":"total","children":[{"name":"Example - get the total number of data items"},{"name":"Returns"}],"parameters":[],"description":"Gets the total number of data items. Uses [schema.total](#configuration-schema.total) if the [transport.read](#configuration-transport.read) option is set."},{"name":"sync","children":[{"name":"Example - save the changes"},{"name":"Returns"}],"parameters":[],"description":"Saves any data item changes.The `sync` method will request the remote service if:* the [transport.create](#configuration-transport.create) option is set and the data source contains new data items* the [transport.destroy](#configuration-transport.destroy) option is set and data items have been removed from the data source* the [transport.update](#configuration-transport.update) option is set and the data source contains updated data items"},{"name":"sort","children":[{"name":"Example - get the sort configuration"},{"name":"Example - sort the data items"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"value `Object|Array`"}]}],"parameters":[{"name":"value `Object|Array`","description":"The sort configuration. Accepts the same values as the [sort](#configuration-sort) option."}],"description":"Gets or sets the sort order which will be applied over the data items."},{"name":"remove","children":[{"name":"Example - remove a data item"},{"name":"Parameters","children":[{"name":"model `kendo.data.Model`"}]}],"parameters":[{"name":"model `kendo.data.Model`","description":"The data item which should be removed."}],"description":"Removes the specified data item from the data source."},{"name":"read","children":[{"name":"Example - use the Promise API to track when a request finishes"},{"name":"Example - read data from a remote service"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"data `Object` *(optional)*"}]}],"parameters":[{"name":"data `Object` *(optional)*","description":"Optional data to pass to the remote service.If you need to **filter**, it is better to use the [`filter()`](#methods-filter) method or the [`query()`](#methods-query) method with a `filter` parameter."}],"description":"Reads data items from a remote service (if the [transport](#configuration-transport) option is set) or from a JavaScript array (if the [data](#configuration-data) option is set).> The `read` method always makes a request to the remote service, unless the Data Source is [offline](#methods-online).offline."},{"name":"query","children":[{"name":"Example - use the Promise API to get notified when the query finishes"},{"name":"Example - query the data source"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"options.sort `Object|Array` *(optional)*"},{"name":"options.pageSize `Number` *(optional)*"},{"name":"options.page `Number` *(optional)*"},{"name":"options.group `Object|Array` *(optional)*"},{"name":"options.filter `Object|Array` *(optional)*"},{"name":"options.aggregate `Array` *(optional)*"},{"name":"options `Object` *(optional)*"}]}],"parameters":[{"name":"options.sort `Object|Array` *(optional)*","description":"The sort configuration. Accepts the same values as the [sort](#configuration-sort) option.The `query` method will request the remote service if the [serverSorting](#configuration-serverSorting)option is set to `true`."},{"name":"options.pageSize `Number` *(optional)*","description":"The number of data items to return.The `query` method will request the remote service if the [serverPaging](#configuration-serverPaging)option is set to `true`."},{"name":"options.page `Number` *(optional)*","description":"The page of data to return.The `query` method will request the remote service if the [serverPaging](#configuration-serverPaging)option is set to `true`."},{"name":"options.group `Object|Array` *(optional)*","description":"The grouping configuration. Accepts the same values as the [filter](#configuration-filter) option.The `query` method will request the remote service if the [serverGrouping](#configuration-serverGrouping)option is set to `true`."},{"name":"options.filter `Object|Array` *(optional)*","description":"The filter configuration. Accepts the same values as the [filter](#configuration-filter) option.The `query` method will request the remote service if the [serverFiltering](#configuration-serverFiltering)option is set to `true`."},{"name":"options.aggregate `Array` *(optional)*","description":"The aggregate configuration. Accepts the same values as the [aggregate](#configuration-aggregate) option.The `query` method will request the remote service if the [serverAggregates](#configuration-serverAggregates)option is set to `true`."},{"name":"options `Object` *(optional)*","description":"The query options which should be applied."}],"description":"Executes the specified query over the data items. Makes a HTTP request if bound to a remote service.This method is useful when you need to modify several parameters of the data request at the same time (e.g. filtering and sorting).If you execute `filter()` and then `sort()`, the DataSource will make two separate requests. With `query()`, it will make one request."},{"name":"pushUpdate","children":[{"name":"Example - pushUpdate with multiple items"},{"name":"Example - pushUpdate with a single item"},{"name":"Parameters","children":[{"name":"items `Object|Array`"}]}],"parameters":[{"name":"items `Object|Array`","description":"The data item or data items to update."}],"description":"Updates the specified data item(s) without marking them as \"dirty\". The data source will not sync data items appended via `pushUpdate`.If the data items are not found (using `schema.model.id`) they will be appended.> The difference between `pushUpdate` and updating items via their `set` method is that items updated via `set` are synced with the remote service."},{"name":"pushDestroy","children":[{"name":"Example - pushDestroy with multiple items"},{"name":"Example - pushDestroy with a single item"},{"name":"Parameters","children":[{"name":"items `Object|Array`"}]}],"parameters":[{"name":"items `Object|Array`","description":"The data item or data items to remove from the data source."}],"description":"Removes the specified data item(s) from the data source without marking them as \"removed\". The data source will not sync data items appended via `pushDestroy`.> The difference between `pushDestroy` and `remove` is that items removed via `remove` are synced with the remote service."},{"name":"pushCreate","children":[{"name":"Example - pushCreate with multiple items"},{"name":"Example - pushCreate with a single item"},{"name":"Parameters","children":[{"name":"items `Object|Array`"}]}],"parameters":[{"name":"items `Object|Array`","description":"The data item or data items to append to the data source."}],"description":"Appends the specified data item(s) to the data source without marking them as \"new\". The data source will not sync data items appended via `pushCreate`.> The difference between `pushCreate` and `add` is that items appended via `add` are synced with the remote service."},{"name":"pageSize","children":[{"name":"Example - get the page size"},{"name":"Example - set the page size"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"size `Number`"}]}],"parameters":[{"name":"size `Number`","description":"The new page size."}],"description":"Gets or sets the current page size."},{"name":"page","children":[{"name":"Example - get the current page"},{"name":"Example - set the current page"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"page `Number`"}]}],"parameters":[{"name":"page `Number`","description":"The new page."}],"description":"Gets or sets the current page."},{"name":"offlineData","children":[{"name":"Example - get the offline state"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"data `Array`"}]}],"parameters":[{"name":"data `Array`","description":"The array of data items that replace the current offline state of the data source."}],"description":"Gets or sets the offline state of the data source."},{"name":"online","children":[{"name":"Example - get the online state"},{"name":"Example - set the online state"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"value `Boolean`"}]}],"parameters":[{"name":"value `Boolean`","description":"The online state - `true` for online, `false` for offline."}],"description":"Gets or sets the online state of the data source."},{"name":"insert","children":[{"name":"Example - insert a data item"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"model `Object|kendo.data.ObservableObject|kendo.data.Model`"},{"name":"index `Number`"}]}],"parameters":[{"name":"model `Object|kendo.data.ObservableObject|kendo.data.Model`","description":"Either a [kendo.data.Model](/api/javascript/data/model) instance or JavaScript object containing the field values."},{"name":"index `Number`","description":"The zero-based index at which the data item will be inserted."}],"description":"Inserts a data item in the data source at the specified index."},{"name":"indexOf","children":[{"name":"Example - get the index of a data item"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"dataItem `kendo.data.ObservableObject`"}]}],"parameters":[{"name":"dataItem `kendo.data.ObservableObject`","description":"The target data item."}],"description":"Gets the index of the specified data item."},{"name":"hasChanges `Boolean`","children":[{"name":"Example - check if the data source has changes"},{"name":"Returns"}],"parameters":[],"description":"Checks if the data items have changed."},{"name":"group","children":[{"name":"Example - get the data source grouping configuration"},{"name":"Example - group the data items"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"value `Object|Array`"}]}],"parameters":[{"name":"value `Object|Array`","description":"The grouping configuration. Accepts the same values as the [group](#configuration-group) option."}],"description":"Gets or sets the grouping configuration."},{"name":"getByUid","children":[{"name":"Returns"},{"name":"Parameters","children":[{"name":"uid `String`"}]}],"parameters":[{"name":"uid `String`","description":"The uid of the model to look for."}],"description":"Gets the data item (model) with the specified [uid](/api/javascript/data/model#fields-uid)."},{"name":"get","children":[{"name":"Example - find a model by id"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"id `Number|String`"}]}],"parameters":[{"name":"id `Number|String`","description":"The id of the model to look for."}],"description":"Gets the data item (model) with the specified [id](/api/javascript/data/model#fields-id).> The `get` method requires the [schema.model](#configuration-schema.model) option to be set and the `id` of the model to be specified."},{"name":"filter","children":[{"name":"Example - get the data source filter"},{"name":"Example - set the data source filter"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"value `Object` *(optional)*"}]}],"parameters":[{"name":"value `Object` *(optional)*","description":"The filter configuration. Accepts the same values as the [filter](#configuration-filter) option (**check there for more examples**)."}],"description":"Gets or sets the filter configuration."},{"name":"fetch","children":[{"name":"Example - use the Promise API to track when a request finishes"},{"name":"Example - read data from a remote data source"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"callback `Function` *(optional)*"}]}],"parameters":[{"name":"callback `Function` *(optional)*","description":"The optional function which is executed when the remote request is finished.  The function context (available via the `this` keyword) will be set to the data source instance."}],"description":"Reads the data items from a remote service (if the [transport](#configuration-transport) option is set) or from a JavaScript array (if the [data](#configuration-data) option is set).> The `fetch` method makes a request to the remote service only the first time it is called if the dataSource is not configured for server operations."},{"name":"data","children":[{"name":"Example - set the data items"},{"name":"Example - get the data items when bound to a remote service"},{"name":"Example - get the data items when bound to array"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"value `Array|kendo.data.ObservableArray`"}]}],"parameters":[{"name":"value `Array|kendo.data.ObservableArray`","description":"The data items which will replace the current ones in the data source. If omitted the current data items will be returned."}],"description":"Gets or sets the data items of the data source.If the data source is bound to a remote service (via the [transport](#configuration-transport) option) the `data` method will return the service response.Every item from the response is wrapped in a [kendo.data.ObservableObject](/api/javascript/data/observableobject) or [kendo.data.Model](/api/javascript/data/model) (if the [schema.model](#configuration-schema.model) option is set).If the data source is bound to a JavaScript array (via the [data](#configuration-data) option) the `data` method will return the items of that array.Every item from the array is wrapped in a [kendo.data.ObservableObject](/api/javascript/data/observableobject) or [kendo.data.Model](/api/javascript/data/model) (if the [schema.model](#configuration-schema.model) option is set).If the data source is grouped (via the [group](#configuration-group) option or the [group](#methods-group) method) and the [serverGrouping](#configuration-serverGrouping) is set to `true`the `data` method will return the group items.> The [schema.model](#configuration-schema.model) configuration will not be used to parse the set data items. The data should be parsed in advance.Compare with the [`view`](#methods-view) method, which will return the data items that correspond to the current page, filter, sort and group configuration."},{"name":"cancelChanges","children":[{"name":"Example - cancel changes of only one data item"},{"name":"Example - cancel all changes"},{"name":"Parameters","children":[{"name":"model `kendo.data.Model`"}]}],"parameters":[{"name":"model `kendo.data.Model`","description":"The optional data item (model). If specified only the changes of this data item will be discarded. If omitted all changes will be discarded."}],"description":"Cancels any pending changes in the data source. Deleted data items are restored, new data items are removed and updated data items are restored to their initial state.> Note that change event will be triggered only when all changes are reverted and will not be triggered when reverting changes for a single model instance."},{"name":"at","children":[{"name":"Example - get a data item"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"index `Number`"}]}],"parameters":[{"name":"index `Number`","description":"The zero-based index of the data item."}],"description":"Returns the data item at the specified index. The index is zero-based."},{"name":"aggregates","children":[{"name":"Example - get aggregate results"},{"name":"Returns"}],"parameters":[],"description":"Returns the aggregate results."},{"name":"aggregate","children":[{"name":"Example - get the data source aggregates"},{"name":"Example - set the data source aggregates"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"value `Object|Array`"}]}],"parameters":[{"name":"value `Object|Array`","description":"The aggregate configuration. Accepts the same values as the [aggregate](#configuration-aggregate) option."}],"description":"Gets or sets the aggregate configuration."},{"name":"add","children":[{"name":"Example - add a data item to a remote data source"},{"name":"Example - add a data item to a local data source"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"model `Object|kendo.data.Model`"}]}],"parameters":[{"name":"model `Object|kendo.data.Model`","description":"Either a [kendo.data.Model](/api/javascript/data/model) instance or JavaScript object containing the data item field values."}],"description":"Appends a data item to the data source."}]},{"name":"Configuration","children":[{"name":"type","children":[{"name":"Example - enable OData support"}],"type":"String","description":"If set the data source will use a predefined [transport](#configuration-transport) and/or [schema](#configuration-schema).The supported values are \"odata\" which supports the [OData](http://www.odata.org) v.2 protocol, \"odata-v4\" which [partially supports](https://github.com/telerik/ui-for-aspnet-mvc-examples/tree/master/grid/odata-v4-web-api-binding)odata version 4 and \"signalr\"."},{"name":"transport.update.url","children":[{"name":"Example - specify URL as a function"},{"name":"Example - specify URL as a string"}],"type":["String","Function"],"description":"The URL to which the request is sent.If set to function the data source will invoke it and use the result as the URL."},{"name":"transport.update.type","children":[{"name":"Example - set the HTTP verb of the request"}],"type":"String","description":"The type of request to make (\"POST\", \"GET\", \"PUT\" or \"DELETE\"), default is \"GET\".> The `type` option is ignored if `dataType` is set to \"jsonp\". JSONP always uses GET requests.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.update.dataType","children":[{"name":"Example - set the data type to JSON"}],"type":"String","description":"The type of result expected from the server. Commonly used values are \"json\" and \"jsonp\".Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.update.data","children":[{"name":"Example - send additional parameters by returning them from a function"},{"name":"Example - send additional parameters as an object"}],"type":["Object","Function"],"description":"Additional parameters which are sent to the remote service. The parameter names must not match reserved words, which are used by the Kendo UI DataSource for[sorting](#configuration-serverSorting), [filtering](#configuration-serverFiltering), [paging](#configuration-serverPaging) and [grouping](#configuration-serverGrouping).Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.update.contentType","children":[{"name":"Example - set content type"}],"type":"String","description":"The content-type HTTP header sent to the server. Default is `\"application/x-www-form-urlencoded\"`. Use `\"application/json\"` if the content is JSON.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.update.cache","children":[{"name":"Example - enable request caching"}],"type":"Boolean","description":"If set to `false` the request result will not be cached by the browser. Setting cache to `false` will only work correctly with HEAD and GET requests. It works by appending *\"_={timestamp}\"* to the GET parameters.By default \"jsonp\" requests are not cached.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.update","children":[{"name":"Example - specify update as a function"},{"name":"Example - specify update as a string"}],"type":["Object","String","Function"],"description":"The configuration used when the data source saves updated data items. Those are data items whose fields have been updated.> The data source uses [jQuery.ajax](http://api.jquery.com/jQuery.ajax) to make a HTTP request to the remote service. The value configured via `transport.update` is passed to `jQuery.ajax`. This means that you can setall options supported by `jQuery.ajax` via `transport.update` except the `success` and `error` callback functions which are used by the transport.If the value of `transport.update` is a function, the data source invokes that function instead of `jQuery.ajax`.If the value of `transport.update` is a string the data source uses this string as the URL of the remote service.> All transport actions (read, update, create, destroy) must be defined in the same way, e.g. as functions or as objects. Mixing the different configuration alternatives is not possible."},{"name":"transport.signalr.server.update","type":"String","description":"Specifies the name of the server-side method of the SignalR hub responsible for updating data items."},{"name":"transport.signalr.server.read","type":"String","description":"Specifies the name of the server-side method of the SignalR hub responsible for reading data items."},{"name":"transport.signalr.server.destroy","type":"String","description":"Specifies the name of the server-side method of the SignalR hub responsible for destroying data items."},{"name":"transport.signalr.server.create","type":"String","description":"Specifies the name of the server-side method of the SignalR hub responsible for creating data items."},{"name":"transport.signalr.server","type":"Object","description":"Specifies the server-side CRUD methods of the SignalR hub."},{"name":"transport.signalr.promise","type":"Object","description":"The promise returned by the `start` method of the SignalR connection. The `promise` option is mandatory."},{"name":"transport.signalr.hub","type":"Object","description":"The SignalR hub object returned by the `createHubProxy` method. The `hub` option is mandatory."},{"name":"transport.signalr.client.update","type":"String","description":"Specifies the name of the client-side method of the SignalR hub responsible for updating data items."},{"name":"transport.signalr.client.read","type":"String","description":"Specifies the name of the client-side method of the SignalR hub responsible for reading data items."},{"name":"transport.signalr.client.destroy","type":"String","description":"Specifies the name of the client-side method of the SignalR hub responsible for destroying data items."},{"name":"transport.signalr.client.create","type":"String","description":"Specifies the name of the client-side method of the SignalR hub responsible for creating data items."},{"name":"transport.signalr.client","type":"Object","description":"Specifies the client-side CRUD methods of the SignalR hub."},{"name":"transport.signalr","children":[{"name":"Example"}],"type":"Object","description":"The configuration used when [type](#configuration-type) is set to \"signalr\". Configures the SignalR settings - hub, connection promise, server and client hub methods.Live demo available at [demos.telerik.com/kendo-ui](http://demos.telerik.com/kendo-ui/grid/signalr).It is recommended to familiarize with the SignalR [JavaScript API](http://www.asp.net/signalr/overview/guide-to-the-api/hubs-api-guide-javascript-client)."},{"name":"transport.read.url","children":[{"name":"Example - specify URL as a function"},{"name":"Example - specify URL as a string"}],"type":["String","Function"],"description":"The URL to which the request is sent.If set to function the data source will invoke it and use the result as the URL."},{"name":"transport.read.type","children":[{"name":"Example - set the HTTP verb of the request"}],"type":"String","description":"The type of request to make (\"POST\", \"GET\", \"PUT\" or \"DELETE\"), default is \"GET\".> The `type` option is ignored if `dataType` is set to \"jsonp\". JSONP always uses GET requests.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.read.dataType","children":[{"name":"Example - set the data type to JSON"}],"type":"String","description":"The type of result expected from the server. Commonly used values are \"json\" and \"jsonp\".Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.read.data","children":[{"name":"Example - send additional parameters by returning them from a function"},{"name":"Example - send additional parameters as an object"}],"type":["Object","Function"],"description":"Additional parameters which are sent to the remote service. The parameter names must not match reserved words, which are used by the Kendo UI DataSource for[sorting](#configuration-serverSorting), [filtering](#configuration-serverFiltering), [paging](#configuration-serverPaging) and [grouping](#configuration-serverGrouping).Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.read.contentType","children":[{"name":"Example - set content type"}],"type":"String","description":"The content-type HTTP header sent to the server. Default is `\"application/x-www-form-urlencoded\"`. Use `\"application/json\"` if the content is JSON.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.read.cache","children":[{"name":"Example - enable request caching"}],"type":"Boolean","description":"If set to `false` the request result will not be cached by the browser. Setting cache to `false` will only work correctly with HEAD and GET requests. It works by appending *\"_={timestamp}\"* to the GET parameters.By default \"jsonp\" requests are not cached.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.read","children":[{"name":"Example - set read as a function"},{"name":"Example - send additional parameters to the remote service"},{"name":"Example - set the read remote service"}],"type":["Object","String","Function"],"description":"The configuration used when the data source loads data items from a remote service.> The data source uses [jQuery.ajax](http://api.jquery.com/jQuery.ajax) to make a HTTP request to the remote service. The value configured via `transport.read` is passed to `jQuery.ajax`. This means that you can setall options supported by `jQuery.ajax` via `transport.read` except the `success` and `error` callback functions which are used by the transport.If the value of `transport.read` is a function, the data source invokes that function instead of `jQuery.ajax`.If the value of `transport.read` is a string the data source uses this string as the URL of the remote service.> All transport actions (read, update, create, destroy) must be defined in the same way, e.g. as functions or as objects. Mixing the different configuration alternatives is not possible."},{"name":"transport.push","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"callbacks.pushUpdate `Function`"},{"name":"callbacks.pushDestroy `Function`"},{"name":"callbacks.pushCreate `Function`"},{"name":"callbacks `Object`"}]}],"type":"Function","description":"The function invoked during transport initialization which sets up push notifications. The data source will call this function only once and providecallbacks which will handle push notifications (data pushed from the server)."},{"name":"transport.parameterMap","children":[{"name":"Example - send request parameters as JSON"},{"name":"Example - convert data source request parameters"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"type `String`"},{"name":"data.take `Number`"},{"name":"data.sort `Array`"},{"name":"data.skip `Number`"},{"name":"data.pageSize `Number`"},{"name":"data.page `Number`"},{"name":"data.models `Array`"},{"name":"data.filter `Object`"},{"name":"data.group `Array`"},{"name":"data.aggregate `Array`"},{"name":"data `Object`"}]}],"type":"Function","description":"The function which converts the request parameters to a format suitable for the remote service. By defaultthe data source sends the parameters using jQuery's [conventions](http://api.jquery.com/jQuery.param/).> The `parameterMap` method is often used to encode the parameters in JSON format.> **Important:** The `parameterMap` function will not be called when using custom functions for the read, update, create and destroy operations."},{"name":"transport.destroy.url","children":[{"name":"Example - specify URL as a function"},{"name":"Example - specify URL as a string"}],"type":["String","Function"],"description":"The URL to which the request is sent.If set to function the data source will invoke it and use the result as the URL."},{"name":"transport.destroy.type","children":[{"name":"Example"}],"type":"String","description":"The type of request to make (\"POST\", \"GET\", \"PUT\" or \"DELETE\"), default is \"GET\".> The `type` option is ignored if `dataType` is set to \"jsonp\". JSONP always uses GET requests.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.destroy.dataType","children":[{"name":"Example - set the data type to JSON"}],"type":"String","description":"The type of result expected from the server. Commonly used values are \"json\" and \"jsonp\".Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.destroy.data","children":[{"name":"Example - send additional parameters by returning them from a function"},{"name":"Example - send additional parameters as an object"}],"type":["Object","Function"],"description":"Additional parameters which are sent to the remote service. The parameter names must not match reserved words, which are used by the Kendo UI DataSource for[sorting](#configuration-serverSorting), [filtering](#configuration-serverFiltering), [paging](#configuration-serverPaging) and [grouping](#configuration-serverGrouping).Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.destroy.contentType","children":[{"name":"Example - set content type"}],"type":"String","description":"The content-type HTTP header sent to the server. Default is `\"application/x-www-form-urlencoded\"`. Use `\"application/json\"` if the content is JSON.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.destroy.cache","children":[{"name":"Example - enable request caching"}],"type":"Boolean","description":"If set to `false` the request result will not be cached by the browser. Setting cache to `false` will only work correctly with HEAD and GET requests. It works by appending *\"_={timestamp}\"* to the GET parameters.By default \"jsonp\" requests are not cached.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.destroy","children":[{"name":"Example - set destroy as a function"},{"name":"Example - set the destroy remote service"}],"type":["Object","String","Function"],"description":"The configuration used when the data source destroys data items. Those are items removed from the data source via the [remove](#methods-remove) method.> The data source uses [jQuery.ajax](http://api.jquery.com/jQuery.ajax) to make a HTTP request to the remote service. The value configured via `transport.destroy` is passed to `jQuery.ajax`. This means that you can setall options supported by `jQuery.ajax` via `transport.destroy` except the `success` and `error` callback functions which are used by the transport.If the value of `transport.destroy` is a function, the data source invokes that function instead of `jQuery.ajax`.If the value of `transport.destroy` is a string the data source uses this string as the URL of the remote service.> All transport actions (read, update, create, destroy) must be defined in the same way, e.g. as functions or as objects. Mixing the different configuration alternatives is not possible."},{"name":"transport.create.url","children":[{"name":"Example - specify URL as a function"},{"name":"Example - specify URL as a string"}],"type":["String","Function"],"description":"The URL to which the request is sent.If set to function the data source will invoke it and use the result as the URL."},{"name":"transport.create.type","children":[{"name":"Example - set the HTTP verb of the request"}],"type":"String","default":" \"GET\"","description":"The type of request to make (\"POST\", \"GET\", \"PUT\" or \"DELETE\"), default is \"GET\".> The `type` option is ignored if `dataType` is set to \"jsonp\". JSONP always uses GET requests.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.create.dataType","children":[{"name":"Example - set the data type to JSON"}],"type":"String","description":"The type of result expected from the server. Commonly used values are \"json\" and \"jsonp\".Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.create.data","children":[{"name":"Example - send additional parameters by returning them from a function"},{"name":"Example - send additional parameters as an object"}],"type":["Object","Function"],"description":"Additional parameters which are sent to the remote service. The parameter names must not match reserved words, which are used by the Kendo UI DataSource for[sorting](#configuration-serverSorting), [filtering](#configuration-serverFiltering), [paging](#configuration-serverPaging) and [grouping](#configuration-serverGrouping).Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.create.contentType","children":[{"name":"Example - set content type"}],"type":"String","description":"The content-type HTTP header sent to the server. Default is `\"application/x-www-form-urlencoded\"`. Use `\"application/json\"` if the content is JSON.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.create.cache","children":[{"name":"Example - enable request caching"}],"type":"Boolean","description":"If set to `false` the request result will not be cached by the browser. Setting cache to `false` will only work correctly with HEAD and GET requests. It works by appending *\"_={timestamp}\"* to the GET parameters.By default \"jsonp\" requests are not cached.Refer to the [jQuery.ajax](http://api.jquery.com/jQuery.ajax) documentation for further info."},{"name":"transport.create","children":[{"name":"Example - set create as a function"},{"name":"Example - set the create remote service"}],"type":["Object","String","Function"],"description":"The configuration used when the data source saves newly created data items. Those are items added to the data source via the [add](#methods-add) or [insert](#methods-insert) methods.> The data source uses [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) to make a HTTP request to the remote service. The value configured via `transport.create` is passed to [`jQuery.ajax`](http://api.jquery.com/jquery.ajax/#jQuery-ajax-settings). This means that you can setall options supported by `jQuery.ajax` via `transport.create` except the `success` and `error` callback functions which are used by the transport.If the value of `transport.create` is a function, the data source invokes that function instead of `jQuery.ajax`. Check [the jQuery documentation](http://api.jquery.com/jquery.ajax/#jQuery-ajax-settings) for more details on the provided argument.If the value of `transport.create` is a string the data source uses this string as the URL of the remote service.> *Important:* The remote service must return the inserted data items and the data item field configured as the `id` must be set. For exampleif the `id` of the data item is `ProductID` the \"create\" server response must be `[{ \"ProductID\": 79 }]`.> All transport actions (read, update, create, destroy) must be defined in the same way, e.g. as functions or as objects. Mixing the different configuration alternatives is not possible."},{"name":"transport","children":[{"name":"Example - specify the remote service configuration"}],"type":"Object","description":"The configuration used to load and save the data items. A data source is remote or local based on the way of it retrieves data items.Remote data sources load and save data items from and to a remote end-point (a.k.a. remote service or server). The `transport` option describes the remote service configuration - URL, HTTP verb, HTTP headers etc.The `transport` option can also be used to implement custom data loading and saving.Local data sources are bound to a JavaScript array via the [data](#configuration-data) option."},{"name":"sort.field","children":[{"name":"Example - specify the sort field"}],"type":"String","description":"The field by which the data items are sorted."},{"name":"sort.dir","children":[{"name":"Example - specify the sort order (direction)"}],"type":"String","description":"The sort order (direction). The supported values are \"asc\" (ascending order) and \"desc\" (descending order)."},{"name":"sort","children":[{"name":"Example - sort the data items by multiple fields"},{"name":"Example - sort the data items"}],"type":["Array","Object"],"description":"The sort order which will be applied over the data items. By default the data items are not sorted.> The data source sorts the data items client-side unless the [serverSorting](#configuration-serverSorting) option is set to `true`."},{"name":"serverSorting","children":[{"name":"Example - enable server sorting"}],"type":"Boolean","default":" false","description":"If set to `true` the data source will leave the data item sorting implementation to the remote service. By default the data source performs sorting client-side.By default the [sort](#configuration-sort) is sent to the server following jQuery's [conventions](http://api.jquery.com/jQuery.param/).For example the sort `{ field: \"age\", dir: \"desc\" }` is sent as:*   sort[0][field]: age*   sort[0][dir]: descUse the [parameterMap](#configuration-transport.parameterMap) option to send the paging options in a different format."},{"name":"serverPaging","children":[{"name":"Example - enable server paging"}],"type":"Boolean","default":" false","description":"If set to `true` the data source will leave the data item paging implementation to the remote service. By default the data source performs paging client-side.> Don't forget to set [schema.total](#configuration-schema.total) if you set `serverPaging` to `true`.The following options are sent to the server when server paging is enabled:- page - the page of data item to return (`1` means the first page)- pageSize - the number of items to return- skip - how many data items to skip- take - the number of data items to return (the same as `pageSize`)Use the [parameterMap](#configuration-transport.parameterMap) option to send the paging options in a different format."},{"name":"serverGrouping","children":[{"name":"Example - enable server grouping"}],"type":"Boolean","default":" false","description":"If set to `true` the data source will leave the grouping implementation to the remote service. By default the data source performs grouping client-side.By default the [group](#configuration-group) is sent to the server following jQuery's [conventions](http://api.jquery.com/jQuery.param/).For example the group `{ field: \"category\", dir: \"desc\" }` is sent as:*   group[0][field]: category*   group[0][dir]: descUse the [parameterMap](#configuration-transport.parameterMap) option to send the group option in a different format."},{"name":"serverFiltering","children":[{"name":"Example - enable server filtering"}],"type":"Boolean","default":" false","description":"If set to `true` the data source will leave the filtering implementation to the remote service. By default the data source performs filtering client-side.By default the [filter](#configuration-filter) is sent to the server following jQuery's [conventions](http://api.jquery.com/jQuery.param/).For example the filter `{ logic: \"and\", filters: [ { field: \"name\", operator: \"startswith\", value: \"Jane\" } ] }` is sent as:*   filter[logic]: and*   filter[filters][0][field]: name*   filter[filters][0][operator]: startswith*   filter[filters][0][value]: JaneUse the [parameterMap](#configuration-transport.parameterMap) option to send the filter option in a different format."},{"name":"serverAggregates","children":[{"name":"Example - enable server aggregates"}],"type":"Boolean","default":" false","description":"If set to `true` the data source will leave the aggregate calculation to the remote service. By default the data source calculates aggregates client-side.> Don't forget to set [schema.aggregates](#configuration-schema.aggregates) if you set `serverAggregates` to `true`."},{"name":"schema.type","children":[{"name":"Example - use XML data"}],"type":"String","default":" \"json\"","description":"The type of the response. The supported values are \"xml\" and \"json\". By default the schema interprets the server response as JSON."},{"name":"schema.total","children":[{"name":"Example: set total as a function"},{"name":"Example: set total as a string"},{"name":"Returns"}],"type":["Function","String"],"description":"The field from the server response which contains the total number of data items. Can be set to a function which is called toreturn the total number of data items for the response.> The `schema.total` setting may be omitted when the Grid is bound to a plain `Array` (i.e. the data items' collection is not a value of a field in the server response).In this case, the `length` of the response `Array` will be used.> `schema.total` must be set if the [serverPaging](#configuration-serverPaging) option is set to `true`."},{"name":"schema.parse","children":[{"name":"Example - data projection"}],"type":"Function","description":"Executed before the server response is used. Use it to preprocess or parse the server response."},{"name":"schema.model","children":[{"name":"Example - set the model as an existing kendo.data.Model instance"},{"name":"Example - set the model as a JavaScript object"}],"type":["Object","kendo.data.Model"],"description":"The data item (model) configuration.If set to an object the [Model.define](/api/javascript/data/model#model.define) method will be used to initialize the data source model.If set to an existing [kendo.data.Model](/api/javascript/data/model) instance the data source will use that instance and will **not** initialize a new one."},{"name":"schema.groups","children":[{"name":"Example - set groups as a function"},{"name":"Example - set groups as a string"}],"type":["Function","String"],"description":"The field from the server response which contains the groups. Can be set to a function which is called toreturn the groups from the response.> The `groups` option is used only when the [serverGrouping](#configuration-serverGrouping) option is set to `true`.The result should have the following format:    [{      aggregates: {        FIEL1DNAME: {          FUNCTON1NAME: FUNCTION1VALUE,          FUNCTON2NAME: FUNCTION2VALUE        },        FIELD2NAME: {          FUNCTON1NAME: FUNCTION1VALUE        }      },      field: FIELDNAME, // the field by which the data items are grouped      hasSubgroups: true, // true if there are subgroups      items: [        // either the subgroups or the data items        {          aggregates: {            //nested group aggregates          },          field: NESTEDGROUPFIELDNAME,          hasSubgroups: false,          items: [          // data records          ],          value: NESTEDGROUPVALUE        },        //nestedgroup2, nestedgroup3, etc.      ],      value: VALUE // the group key    } /* other groups */    ]"},{"name":"schema.errors","children":[{"name":"Example - specify the error field as a function"},{"name":"Example - specify the error field as a string"}],"type":["Function","String"],"default":" \"errors\"","description":"The field from the server response which contains server-side errors. Can be set to a function which is called toreturn the errors for response. If there are any errors the [error](#events-error) event will be fired."},{"name":"schema.data","children":[{"name":"Example - specify the field which contains the data items as a function"},{"name":"Example - specify the field which contains the data items as a string"},{"name":"Returns"}],"type":["Function","String"],"description":"The field from the server response which contains the data items. Can be set to a function which is called toreturn the data items for the response."},{"name":"schema.aggregates","children":[{"name":"Example - set aggregates as a function"},{"name":"Example - set aggregates as a string"}],"type":["Function","String"],"description":"The field from the response which contains the aggregate results. Can be set to a function which is called toreturn the aggregate results from the response.> The `aggregates` option is used only when the [serverAggregates](#configuration-serverAggregates) option is set to `true`.The result of the function should be a JavaScript object which contains the aggregate results for every fields in the following format:```pseudo    {      Field1Name: {        Function1Name: Function1Value,        Function2Name: Function2Value      },      Field2Name: {        Function1Name: Function1Value      }    }```For example if the data source is configured like this:```pseudo    var dataSource = new kendo.data.DataSource({      transport: {        /* transport configuration */      }      serverAggregates: true,      aggregate: [        { field: \"unitPrice\", aggregate: \"max\" },        { field: \"unitPrice\", aggregate: \"min\" },        { field: \"ProductName\", aggregate: \"count\" }      ]    });```The aggregate results should have the following format:```pseudo    {      unitPrice: {          max: 100,          min: 1      },      productName: {          count: 42      }    }```"},{"name":"schema","children":[{"name":"Example - specify the schema of the remote service"}],"type":"Object","description":"The configuration used to parse the remote service response."},{"name":"pageSize","children":[{"name":"Example - set the page size"}],"type":"Number","description":"The number of data items per page.> The data source will page the data items client-side unless the [serverPaging](#configuration-serverPaging) option is set to `true`."},{"name":"page","children":[{"name":"Example - set the current page"}],"type":"Number","description":"The page of data which the data source will return when the [view](#methods-view) method is invoked or request from the remote service.> The data source will page the data items client-side unless the [serverPaging](#configuration-serverPaging) option is set to `true`."},{"name":"offlineStorage","children":[{"name":"Example - set custom offline storage implementation"},{"name":"Example - set offline storage key"}],"type":["String","Object"],"description":"The offline storage key or custom offline storage implementation."},{"name":"group.field","children":[{"name":"Example - set the field"}],"type":"String","description":"The data item field to group by."},{"name":"group.dir","children":[{"name":"Example - sort the groups in descending order"}],"type":"String","default":" \"asc\"","description":"The sort order of the group. The supported values are \"asc\" (ascending order) and \"desc\" (descending order). The default sort order is ascending."},{"name":"group.aggregates.field","children":[{"name":"Example - specify aggregate field"}],"type":"String","description":"The data item field which will be used to calculate the aggregates."},{"name":"group.aggregates.aggregate","children":[{"name":"Example - specify aggregate function"}],"type":"String","description":"The name of the aggregate function. Specifies the aggregate function. The supported aggregates are \"average\", \"count\", \"max\", \"min\" and \"sum\"."},{"name":"group.aggregates","children":[{"name":"Example - set group aggregates"}],"type":"Array","description":"The aggregate(s) which are calculated during grouping. The supported aggregates are \"average\", \"count\", \"max\", \"min\" and \"sum\"."},{"name":"group","children":[{"name":"Example - set group as an array (subgroups)"},{"name":"Example - set group as an object"}],"type":["Array","Object"],"description":"The grouping configuration of the data source. If set the data items will be grouped when the data source is populated. By default grouping is not applied.> The data source groups the data items client-side unless the [serverGrouping](#configuration-serverGrouping) option is set to `true`."},{"name":"filter.value","children":[{"name":"Example - specify the filter value"}],"type":"Object","description":"The value to which the [field](#configuration-filter.field) is compared. The value must be from the same type as the field."},{"name":"filter.operator","children":[{"name":"Example - set the filter operator"}],"type":"String","description":"The filter operator (comparison). The supported operators are: \"eq\" (equal to), \"neq\" (not equal to), \"isnull\" (is equal to null), \"isnotnull\" (is not equal to null), \"lt\" (less than), \"lte\" (less than or equal to), \"gt\" (greater than), \"gte\" (greater than or equal to),\"startswith\", \"endswith\", \"contains\", \"isempty\", \"isnotempty\". The last five are supported only for string fields."},{"name":"filter.logic","children":[{"name":"Example - set the filter logic"}],"type":"String","description":"The logical operation to use when the `filter.filters` option is set. The supported values are \"and\" and \"or\"."},{"name":"filter.filters","children":[{"name":"Example - nested filters"}],"type":"Array","description":"The nested filter expressions. Suppor the same options as [filter](#configuration-filter). Filters can be nested indefinitely."},{"name":"filter.field","children":[{"name":"Example - set the filter field"}],"type":"String","description":"The data item field to which the filter operator is applied."},{"name":"filter","children":[{"name":"Example - set filter as disjunction (or)"},{"name":"Example - set filter as conjunction (and)"},{"name":"Example - set a single filter"}],"type":["Array","Object"],"description":"The filter(s) which is (are) applied over the data items. By default no filter is applied.> The data source filters the data items client-side unless the [serverFiltering](#configuration-serverFiltering) option is set to `true`."},{"name":"data","children":[{"name":"Example - set the data items as an XML string"},{"name":"Example - set the data items of a data source"}],"type":["Array","String"],"description":"The array of data items which the data source contains. The data source will wrap those items as [kendo.data.ObservableObject](/api/javascript/data/observableobject) or [kendo.data.Model](/api/javascript/data/model) (if [schema.model](#configuration-schema-model) is set).Can be set to a string value if the [schema.type](#configuration-schema.type) option is set to \"xml\"."},{"name":"batch","children":[{"name":"Example - enable batch mode"}],"type":"Boolean","default":" false","description":"If set to `true` the data source will batch CRUD operation requests. For example updating two data items would cause one HTTP request instead of two. By default the data sourcemakes a HTTP request for every CRUD operation.> The changed data items are sent by default as `models`. This can be changed via the [parameterMap](#configuration-transport.parameterMap) option."},{"name":"autoSync","children":[{"name":"Example - enable auto sync"}],"type":"Boolean","default":" false","description":"If set to `true` the data source would automatically save any changed data items by calling the [sync](#methods-sync) method. By default changes are not automatically saved."},{"name":"aggregate.field","children":[{"name":"Example - specify aggregate field"}],"type":"String","description":"The data item field which will be used to calculate the aggregates."},{"name":"aggregate.aggregate","children":[{"name":"Example - specify aggregate function"}],"type":"String","description":"The name of the aggregate function. The supported aggregates are \"average\", \"count\", \"max\", \"min\" and \"sum\"."},{"name":"aggregate","children":[{"name":"Example - specify aggregates"}],"type":"Array","description":"The aggregate(s) which are calculated when the data source populates with data. The supported aggregates are \"average\", \"count\", \"max\", \"min\" and \"sum\".> The data source calculates aggregates client-side unless the [serverAggregates](#configuration-serverAggregates) option is set to `true`."}]},{"name":"Overview"}]}