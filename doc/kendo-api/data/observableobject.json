{"name":"kendo.data.ObservableObject","children":[{"name":"Events","children":[{"name":"set event","children":[{"name":"Example - perform validation by preventing the set event"},{"name":"Example - subscribe to the set event"},{"name":"Event Data","children":[{"name":"e.preventDefault `Function`"},{"name":"e.value `Number|String|Data|Object`"},{"name":"e.field `String`"}]}],"description":"Fired when the `set` method is invoked.> The `set` event is raised **before** the field value is updated. Calling the `get` method from the event handler will return the old value. Calling`e.preventDefault` will prevent the update of the field and the `change` event will not be raised.","args":["e.preventDefault","e.value","e.field"]},{"name":"get event","children":[{"name":"Example - subscribe to the get event"},{"name":"Event Data","children":[{"name":"e.field `String`"}]}],"description":"Fired when the `get` method is invoked.","args":["e.field"]},{"name":"change event","children":[{"name":"Example - subscribe to the change event"},{"name":"Event Data","children":[{"name":"e.field `String`"}]}],"description":"Fired when a field value is updated via the `set` method.> The `change` event is raised **after** the field value is updated. Calling the `get` method from the event handler will return the new value.","args":["e.field"]}]},{"name":"Methods","children":[{"name":"toJSON","children":[{"name":"Example"},{"name":"Returns"}],"parameters":[],"description":"Creates a plain JavaScript object which contains all fields of the `ObservableObject`."},{"name":"set","children":[{"name":"Example - set the value of a nested field"},{"name":"Example - set the value of a field"},{"name":"Parameters","children":[{"name":"value `Number|String|Date|Object`"},{"name":"name `String`"}]}],"parameters":[{"name":"value `Number|String|Date|Object`","description":"The new value of the field."},{"name":"name `String`","description":"The name of the field whose value is going to be returned."}],"description":"Sets the value of the specified field."},{"name":"parent","children":[{"name":"Example - get the parent object"},{"name":"Returns"}],"parameters":[],"description":"Gets the parent of the object if such parent exists."},{"name":"get","children":[{"name":"Example - get the value of a nested field"},{"name":"Example - get the value of a field"},{"name":"Parameters","children":[{"name":"name `String`"}]},{"name":"Returns"}],"parameters":[{"name":"name `String`","description":"The name of the field whose value is going to be returned."}],"description":"Gets the value of the specified field."},{"name":"bind","children":[{"name":"Example - subscribe to an event"}],"parameters":[],"description":"Attaches a handler to an event. Examples and more info can be found in the [bind](/api/javascript/observable#bind) section of thekendo.Observable API reference."}]},{"name":"Fields","children":[{"name":"uid `String`","children":[{"name":"Example - using the uid field"}]}]},{"name":"Configuration","children":[{"name":"Example","description":"    <script>    var observable = kendo.observable({        // complex object field        person: {            name: \"John Doe\"        },        // array field        numbers: [1, 2, 3]    });    console.log(observable.person instanceof kendo.data.ObservableObject); // outputs \"true\"    console.log(observable.numbers instanceof kendo.data.ObservableArray); // outputs \"true\"    </script>"},{"name":"Example","description":"    <script>    var observable = kendo.observable({ name: \"John Doe\" });    console.log(observable.name); // outputs \"John Doe\"    </script>> **Important:** Complex fields are automatically wrapped in nested `ObservableObject` instances.> Array fields are wrapped as `kendo.data.ObservableArray` objects.> The `change` event of the child objects will bubble to the parent `ObservableObject`.> Fields with names that are prefixed with an underscore will not be wrapped."},{"name":"Example","description":"    <script>    var observable = new kendo.data.ObservableObject({ name: \"John Doe\" });    console.log(observable.name); // outputs \"John Doe\"    </script>"}]}]}