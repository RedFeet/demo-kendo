{"name":"kendo.data.Model","children":[{"name":"Events","children":[{"name":"set event","description":"Raised when the `set` method is invoked. Inherited from `kendo.data.ObservableObject`. Examples and more info can be found in the [set](/api/javascript/data/observableobject#events-set) section of theObservableObject API reference."},{"name":"get event","description":"Raised when the `get` method is invoked. Inherited from `kendo.data.ObservableObject`. Examples and more info can be found in the [get](/api/javascript/data/observableobject#events-get) section of theObservableObject API reference."},{"name":"change event","description":"Raised when a field value is updated via the `set` method. Inherited from `kendo.data.ObservableObject`. Examples and more info can be found in the [change](/api/javascript/data/observableobject#events-change) section of theObservableObject API reference."}]},{"name":"Methods","children":[{"name":"toJSON","parameters":[],"description":"Creates a plain JavaScript object which contains all fields of the `Model`. Inherited from `kendo.data.ObservableObject`. Examples and more info can be found in the [toJSON](/api/javascript/data/observableobject#methods-toJSON) section of theObservableObject API reference."},{"name":"set","parameters":[],"description":"Sets the value of the specified field. Inherited from `kendo.data.ObservableObject`. Examples and more info can be found in the [set](/api/javascript/data/observableobject#methods-set) section of theObservableObject API reference."},{"name":"isNew","children":[{"name":"Example - check if a model is new"},{"name":"Returns"}],"parameters":[],"description":"Checks if the `Model` is new or not. The `id` field is used to determine if a model instance is new or existing one.If the value of the field specified is equal to the default value (specified through the `fields` configuration) the model is considered as new."},{"name":"get","parameters":[],"description":"Gets the value of the specified field. Inherited from `kendo.data.ObservableObject`. Examples and more info can be found in the [get](/api/javascript/data/observableobject#methods-get) section of theObservableObject API reference."},{"name":"editable","children":[{"name":"Example - check if a field is editable or not"},{"name":"Parameters","children":[{"name":"field `String`"}]},{"name":"Returns"}],"parameters":[{"name":"field `String`","description":"The field to check."}],"description":"Determines if the specified field is editable or not."},{"name":"Model.define","children":[{"name":"Example - define the fields of a model"},{"name":"Parameters","children":[{"name":"options.fields.fieldName.validation `Object`"},{"name":"options.fields.fieldName.from `String`"},{"name":"options.fields.fieldName.type `String`"},{"name":"options.fields.fieldName.parse `Function`"},{"name":"options.fields.fieldName.nullable `Boolean`"},{"name":"options.fields.fieldName.editable `Boolean`"},{"name":"options.fields.fieldName.defaultValue"},{"name":"options.fields `Object|Array`"},{"name":"options.id `String`"},{"name":"options `Object`"}]}],"parameters":[{"name":"options.fields.fieldName.validation `Object`","description":"Specifies the validation options which will be used by [Kendo Validator](/api/javascript/ui/validator)."},{"name":"options.fields.fieldName.from `String`","description":"Specifies the field of the original record whose value is used to populate the Model field."},{"name":"options.fields.fieldName.type `String`","description":"Specifies the type of the field. The available options are `\"string\"`, `\"number\"`, `\"boolean\"`, `\"date`\". The default is `\"string\"`."},{"name":"options.fields.fieldName.parse `Function`","description":"Specifies the function which will parse the field value. If not set default parsers will be used."},{"name":"options.fields.fieldName.nullable `Boolean`","description":"Specifies if the `defaultValue` setting should be used. The default is `false`."},{"name":"options.fields.fieldName.editable `Boolean`","description":"Specifies if the field is editable or not. The default value is `true`."},{"name":"options.fields.fieldName.defaultValue","description":"Specifies the which will be used for the field when a new model instance is created. Default settings depend on the type of the field. Default for \"string\" is `\"\"`,for \"number\" is `0` and for \"date\" is `new Date()` (today)."},{"name":"options.fields `Object|Array`","description":"A set of key/value pairs the configure the model fields. The key specifies the name of the field.Quote the key if it contains spaces or other symbols which are not valid for a JavaScript identifier."},{"name":"options.id `String`","description":"The name of the field which acts as the identifier of the model. The identifier is used to determine if a model instance is new or existing one.If the value of the field specified is equal to the default value (specified through the `fields` configuration) the model is considered as new."},{"name":"options `Object`","description":"Describes the configuration options of the new model type."}],"description":"Defines a new `Model` type using the provided options. The returned value inherits from the `kendo.data.Model` class."},{"name":"bind","parameters":[],"description":"Attaches a handler to an event. Examples and more info can be found in the [bind](/api/javascript/observable#methods-bind) section of the `kendo.Observable` API reference."}]},{"name":"Fields","children":[{"name":"dirty `Boolean`","children":[{"name":"Example - using the dirty field"}]},{"name":"uid"},{"name":"idField `String`"},{"name":"id"}]},{"name":"Configuration","children":[{"name":"Define","description":"    <script>    var Person = kendo.data.Model.define({        id: \"personId\", // the identifier of the model        fields: {            \"name\": {                type: \"string\"            },            \"age\": {                type: \"number\"            }        }    });    var person = new Person({        name: \"John Doe\",        age: 42    });    console.log(person.get(\"name\")); // outputs \"John Doe\"    console.log(person.get(\"age\")); // outputs 42    </script>"}]}]}