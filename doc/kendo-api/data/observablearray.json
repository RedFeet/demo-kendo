{"name":"kendo.data.ObservableArray","children":[{"name":"Events","children":[{"name":"change","children":[{"name":"Example - subscribe to the change event"},{"name":"Event Data","children":[{"name":"e.field `String`"},{"name":"e.items `Array`"},{"name":"e.index `Number`"},{"name":"e.action `String`"}]}],"description":"Fired when the items of the `ObservableArray` change in some way.","args":["e.field","e.items","e.index","e.action"]}]},{"name":"Methods","children":[{"name":"unshift","children":[{"name":"Example - add items to the beginning of an `ObservableArray`"},{"name":"Parameters","children":[{"name":"item1, ..., itemN"}]},{"name":"Returns"}],"parameters":[{"name":"item1, ..., itemN","description":"The items to add to the beginning of the `ObservableArray`."}],"description":"Adds one or more items to the beginning of an `ObservableArray` and returns the new length.  Equivalent of [Array.prototype.unshift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift).> **Important**: The `unshift` method raises the [change](#events-change) event. The `action` field of theevent argument is set to `\"add\"`. The `items` field of the event argument is an array thatcontains the new items."},{"name":"toJSON","children":[{"name":"Example - return the raw array representation"}],"parameters":[],"description":"Returns a JavaScript Array which represents the contents of the `ObservableArray`."},{"name":"shift","children":[{"name":"Example - remove the first item"},{"name":"Returns"}],"parameters":[],"description":"Removes the first item from an `ObvservableArray` and returns that item. Equivalent of [Array.prototype.shift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift).> **Important**: The `shift` method raises the `change` event. The `action` field of theevent argument is set to `\"remove\"`. The `items` field of the event argument is an array thatcontains the removed item."},{"name":"splice","children":[{"name":"Example - splice array items"},{"name":"Parameters","children":[{"name":"item1, ..., itemN *(optional)*"},{"name":"howMany `Number`"},{"name":"index `Number`"}]},{"name":"Returns"}],"parameters":[{"name":"item1, ..., itemN *(optional)*","description":"The items to add to the array. If you don't specify any items, `splice` simply removes items from the array."},{"name":"howMany `Number`","description":"An integer indicating the number of items to remove. If set to 0, no items are removed. In this case, you should specify at least one new item."},{"name":"index `Number`","description":"Index at which to start changing the array. If negative, will begin that many elements from the end."}],"description":"Changes an `ObservableArray`, by adding new items while removing old items. Equivalent of[Array.prototype.splice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)> **Important**: The `splice` method raises the [change](#events-change) event once or twice depending on the change. The `action` field of theevent argument is set to `\"add\"` (if items are added) or `\"remove` (if items are removed). The `items` field of the event argument is the array thatcontains the appended items or removed items. In the above example the `change` event will be raised two times - first because \"baseball\" is removed andsecond because \"tennis\" and \"hockey\" are added."},{"name":"slice","children":[{"name":"Example - slice items from an `ObservableArray`"},{"name":"Parameters","children":[{"name":"end `Number`"},{"name":"begin `Number`"}]}],"parameters":[{"name":"end `Number`","description":"Zero-based index at which to end extraction. If `end` is omitted, `slice` extracts to theend of the sequence."},{"name":"begin `Number`","description":"Zero-based index at which to begin extraction."}],"description":"Returns a one-level deep copy of a portion of an array. Equivalent of[Array.prototype.slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).The result of the `slice` method is **not** an instance of `ObvservableArray`. It is a regular JavaScript Array object.> **Important:** The `slice` method does not modify the original `ObservableArray`."},{"name":"push","children":[{"name":"Example - append more than one item to an `ObservableArray`"},{"name":"Example - append an item to an `ObservableArray`"},{"name":"Parameters","children":[{"name":"item1, ..., itemN"}]},{"name":"Returns"}],"parameters":[{"name":"item1, ..., itemN","description":"The item(s) to append to the array."}],"description":"Appends the given items to the array and returns the new length of the array. Equivalent of [Array.prototype.push](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push).The new items are wrapped as `ObservableObject` if they are complex objects.> **Important**: The `push` method raises the [change](#events-change) event. The `action` field of theevent argument is set to `\"add\"`. The `items` field of the event argument is the array that contains the appended items."},{"name":"pop","children":[{"name":"Example - remove the last item from an `ObservableArray`"},{"name":"Returns"}],"parameters":[],"description":"Removes the last item from an array and returns that item. Equivalent of [Array.prototype.pop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop).> **Important**: The `pop` method raises the [change](#events-change) event. The `action` field of theevent argument is set to `\"remove\"`. The `items` field of the event argument is the array that contains the removed item."},{"name":"parent","children":[{"name":"Example - get the parent"},{"name":"Returns"}],"parameters":[],"description":"Gets the parent of the array if such parent exists."},{"name":"join","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"separator `String`"}]}],"parameters":[{"name":"separator `String`","description":"Specifies the string to separate each item of the array. If omitted the array items areseparated with a comma (`,`)"}],"description":"Joins all items of an `ObservableArray` into a string. Equivalent of[Array.prototype.join](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join)."},{"name":"bind","children":[{"name":"Parameters","children":[{"name":"handler `Function`"},{"name":"eventName `String`"}]},{"name":"Example - subscribe to an event"}],"parameters":[{"name":"handler `Function`","description":"The function which will be invoked when the event is raised."},{"name":"eventName `String`","description":"The name of the event."}],"description":"Attaches an event handler for the specified event."}]},{"name":"Fields","children":[{"name":"length","children":[{"name":"Example - iterating over ObservableArray"}]}]},{"name":"Configuration","children":[{"name":"Example","description":"    <script>    var complex = new kendo.data.ObservableArray([        { name: \"John Doe\" },        { name: \"Jane Doe\" }    ]);    console.log(complex[0] instanceof kendo.data.ObservableObject); // outputs \"true\"    var primitive = new kendo.data.ObservableArray([        \"John Doe\", \"Jane Doe\"    ]);    console.log(typeof (primitive[0]) ); // outputs \"string\"    </script>"},{"name":"Example","description":"    <script>    var observable = kendo.observable({        people: [            { name: \"John Doe\" },            { name: \"Jane Doe\" }        ]    });    console.log(observable.people instanceof kendo.data.ObservableArray); // outputs \"true\"    </script>> **Important**: The `kendo.data.ObservableArray` wraps its items [kendo.data.ObservableObject](/api/javascript/data/observableobject) instances (unless the items are of primitive type)."},{"name":"Example","description":"    <script>    var array = new kendo.data.ObservableArray([        { name: \"John Doe\" },        { name: \"Jane Doe\" }    ]);    console.log(array[0].name); // outputs \"John Doe\"    console.log(array.length); // outputs \"2\"    </script>"}]}]}