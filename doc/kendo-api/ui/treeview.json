{"name":"kendo.ui.TreeView","children":[{"name":"Events","children":[{"name":"select","children":[{"name":"Example - subscribe to the \"select\" event after initialization"},{"name":"Example - subscribe to the \"select\" event during initialization"},{"name":"Event Data","children":[{"name":"e.node `Element`"}]}],"description":"Triggered when a node is being selected by the user. Cancellable.","args":["e.node"]},{"name":"navigate","children":[{"name":"Example - subscribe to the \"navigate\" event after initialization"},{"name":"Example - subscribe to the \"navigate\" event during initialization"},{"name":"Event Data","children":[{"name":"e.node `Element`"}]}],"description":"Triggered when the user moves the focus on another node","args":["e.node"]},{"name":"expand","children":[{"name":"Example - subscribe to the \"expand\" event after initialization"},{"name":"Example - subscribe to the \"expand\" event during initialization"},{"name":"Event Data","children":[{"name":"e.node `Element`"}]}],"description":"Triggered before a subgroup gets expanded.","args":["e.node"]},{"name":"drop","children":[{"name":"Example - subscribe to the \"drop\" event after initialization"},{"name":"Example - subscribe to the \"drop\" event during initialization"},{"name":"The difference between e.setValid(false) and e.preventDefault()"},{"name":"Event Data","children":[{"name":"e.dropPosition `String`"},{"name":"e.dropTarget `Element`"},{"name":"e.setValid `Function`"},{"name":"e.valid `Boolean`"},{"name":"e.destinationNode `Element`"},{"name":"e.sourceNode `Element`"}]}],"description":"Triggered when a node is being dropped.","args":["e.dropPosition","e.dropTarget","e.setValid","e.valid","e.destinationNode","e.sourceNode"]},{"name":"dragstart","children":[{"name":"Example - disable dragging of root nodes"},{"name":"Example - subscribe to the \"dragstart\" event after initialization"},{"name":"Example - subscribe to the \"dragstart\" event during initialization"},{"name":"Event Data","children":[{"name":"e.sourceNode `Element`"}]}],"description":"Triggered before the dragging of a node starts.","args":["e.sourceNode"]},{"name":"dragend","children":[{"name":"Example - subscribe to the \"dragend\" event after initialization"},{"name":"Example - subscribe to the \"dragend\" event during initialization"},{"name":"Event Data","children":[{"name":"e.dropPosition `String`"},{"name":"e.destinationNode `Element`"},{"name":"e.sourceNode `Element`"}]}],"description":"Triggered after a node has been dropped.","args":["e.dropPosition","e.destinationNode","e.sourceNode"]},{"name":"drag","children":[{"name":"Example - disable node reordering"},{"name":"Example - subscribe to the \"drag\" event after initialization"},{"name":"Example - subscribe to the \"drag\" event during initialization"},{"name":"Event Data","children":[{"name":"e.setStatusClass `Function`"},{"name":"e.statusClass `String`"},{"name":"e.pageY `Number`"},{"name":"e.pageX `Number`"},{"name":"e.dropTarget `Element`"},{"name":"e.sourceNode `Element`"}]}],"description":"Triggered while a node is being dragged.","args":["e.setStatusClass","e.statusClass","e.pageY","e.pageX","e.dropTarget","e.sourceNode"]},{"name":"dataBound","children":[{"name":"Example - show an empty message when no items have been loaded from the server"},{"name":"Example - subscribe to the \"dataBound\" event after initialization"},{"name":"Example - subscribe to the \"dataBound\" event during initialization"},{"name":"Event Data","children":[{"name":"e.node `jQuery`"}]}],"description":"Triggered after the dataSource change event has been processed (adding/removing items);","args":["e.node"]},{"name":"collapse","children":[{"name":"Example - subscribe to the \"collapse\" event after initialization"},{"name":"Example - subscribe to the \"collapse\" event during initialization"},{"name":"Event Data","children":[{"name":"e.node `Element`"}]}],"description":"Triggered before a subgroup gets collapsed. Cancellable.","args":["e.node"]},{"name":"check","children":[{"name":"Example - subscribe to the \"check\" event after initialization"},{"name":"Example - subscribe to the \"check\" event during initialization"},{"name":"Event Data","children":[{"name":"e.node `Element`"}]}],"description":"Triggered after the user has checked or unchecked a checkbox.If [checkChildren](#checkboxes.checkChildren) is `true`, the event is triggered after all checked states are updated.This event has been introduced in internal builds after 2014.2.828.","args":["e.node"]},{"name":"change","children":[{"name":"Example - subscribe to the \"change\" event after initialization"},{"name":"Example - subscribe to the \"change\" event during initialization"}],"description":"Triggered when the selection has changed (either by the user or through the `select` method)."}]},{"name":"Methods","children":[{"name":"updateIndeterminate","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"node `jQuery`"}]}],"parameters":[{"name":"node `jQuery`","description":"Optional. The root of the hierarchy that will be looped through. Allows only a subtree to be processed. The default value is the TreeView root."}],"description":"Updates the indeterminate state of the TreeView checkboxes.Call it after using the insert / remove API on TreeViews with [checkChildren: true](#configuration-checkboxes.checkChildren).Use to improve performance when checking multiple checkboxes through code."},{"name":"toggle","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"node `jQuery|Element|String`"}]}],"parameters":[{"name":"node `jQuery|Element|String`","description":"The node that should be toggled."}],"description":"Toggles the node of a TreeView between its expanded and collapsed states."},{"name":"text","children":[{"name":"Example"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"newText `String`"},{"name":"node `jQuery|Element|String`"}]}],"parameters":[{"name":"newText `String`","description":"Optional. When passed, sets the node text to the specified string"},{"name":"node `jQuery|Element|String`","description":"The node of which the text is being retrieved or set."}],"description":"Gets or sets the text of a node in a TreeView."},{"name":"setDataSource","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"dataSource `kendo.data.HierarchicalDataSource`"}]}],"parameters":[{"name":"dataSource `kendo.data.HierarchicalDataSource`","description":"The new dataSource that the widget will bind to"}],"description":"Sets and binds a dataSource to the widget.> Note: Calling this method with an array will not change the loadOnDemand flag, unlike initialization with an array option."},{"name":"select","children":[{"name":"Example"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"node `jQuery|Element|String` *(optional)*"}]}],"parameters":[{"name":"node `jQuery|Element|String` *(optional)*","description":"If provided, the node that should be selected."}],"description":"Gets or sets the selected node."},{"name":"remove","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"node `jQuery|Element|String`"}]}],"parameters":[{"name":"node `jQuery|Element|String`","description":"The node that is to be removed."}],"description":"Removes a node from the widget."},{"name":"parent","children":[{"name":"Example"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"node `jQuery|Element|String`"}]}],"parameters":[{"name":"node `jQuery|Element|String`","description":"The child node whose parent will be returned."}],"description":"Gets the parent node of the item"},{"name":"items","children":[{"name":"Returns"}],"parameters":[],"description":"Obtains an Array of the DOM elements, which correspond to the data items from the Kendo UI DataSource [view](/api/javascript/data/datasource#methods-view)."},{"name":"insertBefore","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"referenceNode `jQuery`"},{"name":"nodeData `Object`"}]}],"parameters":[{"name":"referenceNode `jQuery`","description":"The node that follows the inserted node."},{"name":"nodeData `Object`","description":"A JSON-formatted string or selector that specifies the node to be inserted."}],"description":"Inserts a node before another node. This method may also be used to reorder nodes."},{"name":"insertAfter","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"referenceNode `jQuery`"},{"name":"nodeData `Object`"}]}],"parameters":[{"name":"referenceNode `jQuery`","description":"The node that will precede the newly-appended node."},{"name":"nodeData `Object`","description":"A JSON-formatted string or selector that specifies the node to be inserted."}],"description":"Inserts a node after a specified node.This method may also be used to reorder nodes."},{"name":"findByUid","children":[{"name":"Example"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"text `String`"}]}],"parameters":[{"name":"text `String`","description":"The text that is being searched for."}],"description":"Searches for a node with the given unique identifier.Applicable when the widget is bound to a [HierarchicalDataSource](/api/javascript/data/hierarchicaldatasource).If you want to find a node by its `id`, use the [dataSource.get()](/api/javascript/data/datasource#get) method and supply its uid to the `findByUid` method."},{"name":"findByText","children":[{"name":"Example"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"text `String`"}]}],"parameters":[{"name":"text `String`","description":"The text that is being searched for."}],"description":"Searches for a node that has specific text."},{"name":"expandTo","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"targetNode `kendo.data.Node|Object`"}]}],"parameters":[{"name":"targetNode `kendo.data.Node|Object`","description":"The dataItem of the node up to which to expand. Can also be the node ID"}],"description":"Expands all nodes up to a given element. The element needs to be already loaded."},{"name":"expandPath","children":[{"name":"Example of expanding a remote loaded path"},{"name":"Example"},{"name":"Parameters","children":[{"name":"complete `Function`"},{"name":"path `Array`"}]}],"parameters":[{"name":"complete `Function`","description":"Callback function that will be called once the path has been expanded."},{"name":"path `Array`","description":"The IDs of the nodes that need to be expanded."}],"description":"Expands all nodes to a given element. Nodes may be loaded from a remote end-point."},{"name":"expand","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"nodes `jQuery|Element|String`"}]}],"parameters":[{"name":"nodes `jQuery|Element|String`","description":"The nodes that are to be expanded."}],"description":"Expands collapsed nodes."},{"name":"enable","children":[{"name":"Example"},{"name":"Parameters","children":[{"name":"enable `Boolean` *(optional, default: true)*"},{"name":"nodes `jQuery|Element|String`"}]}],"parameters":[{"name":"enable `Boolean` *(optional, default: true)*","description":"Whether the nodes should be enabled or disabled."},{"name":"nodes `jQuery|Element|String`","description":"The nodes that are to be enabled/disabled."}],"description":"Enables or disables nodes."},{"name":"detach","children":[{"name":"Example - remove the node with ID, firstItem"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"node `jQuery|Element|String`"}]}],"parameters":[{"name":"node `jQuery|Element|String`","description":"The node that is to be detached."}],"description":"Removes a node from a TreeView, but keeps its jQuery.data() objects."},{"name":"destroy","children":[{"name":"Example"}],"parameters":[],"description":"Prepares the widget for safe removal from DOM. Detaches all event handlers and removes jQuery.data attributes to avoid memory leaks. Calls destroy method of any child Kendo widgets.> This method does not remove the widget element from DOM."},{"name":"dataItem","children":[{"name":"Example - get the data item of the first node"},{"name":"Returns"},{"name":"Parameters","children":[{"name":"node `jQuery|Element|String`"}]}],"parameters":[{"name":"node `jQuery|Element|String`","description":"A string, DOM element or jQuery object which represents the node. A string is treated as a jQuery selector."}],"description":"Returns the data item to which the specified node is bound."},{"name":"collapse","children":[{"name":"Parameters","children":[{"name":"nodes `jQuery|Element|String`"}]},{"name":"Example"}],"parameters":[{"name":"nodes `jQuery|Element|String`","description":"The nodes that will be collapsed."}],"description":"Collapses nodes."},{"name":"append","children":[{"name":"Returns"},{"name":"Parameters","children":[{"name":"success `Function` *(optional)*"},{"name":"parentNode `jQuery` *(optional)*"},{"name":"nodeData `Object|jQuery`"}]},{"name":"Example"}],"parameters":[{"name":"success `Function` *(optional)*","description":"A success callback that will be called once the new node has been appended.Useful in the case of remote binding where an item is appended to an unfetched node. The callback is calledonce the siblings have been fetched."},{"name":"parentNode `jQuery` *(optional)*","description":"The node that will contain the newly appended node. If not specified, the new node will be appended to theroot group of the TreeView."},{"name":"nodeData `Object|jQuery`","description":"A JSON-formatted string or selector that specifies the node to be appended.If the argument is a plain JavaScript object, a new item will be created.If the argument is a jQuery element that holds a node, the TreeView node will be moved.If the argument is an array of objects, each item of the array will be appended."}],"description":"Appends a node to any level of the TreeView . This method may also be used to reorder nodes."}]},{"name":"Configuration","children":[{"name":"template","children":[{"name":"Example"}],"type":["String","Function"],"description":"Template for rendering each node."},{"name":"messages.retry","children":[{"name":"Example - customize retry message"}],"type":"String","default":" \"Retry\"","description":"The text message shown in the retry button."},{"name":"messages.requestFailed","children":[{"name":"Example - customize requestFailed message"}],"type":"String","default":" \"Request failed.\"","description":"The text message shown when an error occurs while fetching the content."},{"name":"messages.loading","children":[{"name":"Example - customize loading message"}],"type":"String","default":" \"Loading...\"","description":"The text message shown while the root level items are loading."},{"name":"messages","children":[{"name":"Example - customize TreeView messages"}],"type":"Object","description":"The text messages displayed in the widget. Use it to customize or localize the messages."},{"name":"loadOnDemand","children":[{"name":"Example - force lazy loading of sublevels"}],"type":"Boolean","default":" true","description":"Indicates whether the child DataSources should be fetched lazily when parent groups get expanded.Setting this to false causes all child DataSources to be loaded at initialization time.> Note: when initializing the widget from an array (rather than from a HierarchicalDataSource instance), this option defaults to false, rather than true."},{"name":"dragAndDrop","children":[{"name":"Example"}],"type":"Boolean","default":" false","description":"Disables (**false**) or enables (**true**) drag-and-drop of the nodes."},{"name":"dataUrlField","children":[{"name":"Example"}],"type":"String","default":" null","description":"Sets the field of the data item that provides the link URL of the nodes."},{"name":"dataTextField","children":[{"name":"Example - using different fields on different levels"},{"name":"Example"}],"type":["String","Array"],"default":" null","description":"Sets the field of the data item that provides the text content of the nodes.If an array, each level uses the field that is at the same index in the array, or the last item in the array."},{"name":"dataSpriteCssClassField","children":[{"name":"Example"}],"type":"String","default":" null","description":"Sets the field of the data item that provides the sprite CSS class of the nodes.If an array, each level uses the field that is at the same index in the array, or the last item in the array."},{"name":"dataSource","children":[{"name":"Example - set dataSource as an existing kendo.data.HierarchicalDataSource instance"},{"name":"Example - set dataSource as a JavaScript array"},{"name":"Example - set dataSource as a JavaScript object"}],"type":["Object","Array","kendo.data.HierarchicalDataSource"],"description":"The data source of the widget which is used render nodes. Can be a JavaScript object which represents a valid data source configuration, a JavaScript array or an existing [kendo.data.HierarchicalDataSource](/api/javascript/data/hierarchicaldatasource) instance.If the `dataSource` option is set to a JavaScript object or array the widget will initialize a new [kendo.data.HierarchicalDataSource](/api/javascript/data/hierarchicaldatasource) instance using that value as data source configuration.If the `dataSource` option is an existing [kendo.data.HierarchicalDataSource](/api/javascript/data/hierarchicaldatasource) instance the widget will use that instance and will **not** initialize a new one."},{"name":"dataImageUrlField","children":[{"name":"Example - specify custom image URL field"}],"type":"String","default":" null","description":"Sets the field of the data item that provides the image URL of the TreeView nodes."},{"name":"checkboxes.template","children":[{"name":"Example - specify a different name for each checkbox, bound to the item id"}],"type":["String","Function"],"description":"The [template](/api/javascript/kendo#methods-template) which renders the checkboxes. Can be used to allow posting ofadditional information along the TreeView checkboxes.The fields which can be used in the template are:* item - the data item of the given node* treeview - the TreeView options"},{"name":"checkboxes.name","children":[{"name":"Example"}],"type":"String","description":"Sets the name attribute of the checkbox inputs. That name will be posted to the server."},{"name":"checkboxes.checkChildren","children":[{"name":"Example - enable tri-state checkboxes and propagate checked state to children"}],"type":"Boolean","default":" false","description":"Indicates whether checkboxes of child items should get checked when the checkbox of a parent item is checked. Thisalso enables tri-state checkboxes with an indeterminate state."},{"name":"checkboxes","children":[{"name":"Example - show node checkboxes"}],"type":["Boolean","Object"],"description":"If `true` or an object, renders checkboxes beside each node."},{"name":"autoScroll","children":[{"name":"Example - use autoScroll in a scrollable container"}],"type":"Boolean","default":" false","description":"If set to `true` the widget will auto-scroll the containing element when the mouse/finger is close to the top/bottom of it.> If the scroll container is different than the TreeView container, set `overflow: hidden` on the TreeView container."},{"name":"autoBind","children":[{"name":"Example - disable automatic binding"}],"type":"Boolean","default":" true","description":"If set to `false` the widget will not bind to the data source during initialization. In this case data binding will occur when the [change](/api/javascript/data/datasource#events-change) event of thedata source is fired. By default the widget will bind to the data source specified in the configuration.> Setting `autoBind` to `false` is useful when multiple widgets are bound to the same data source. Disabling automatic binding ensures that the shared data source does not make more than one request to the remote service."},{"name":"animation.expand.effects","children":[{"name":"Example - make sub-levels fade in and expand vertically"}],"type":"String","default":" \"expandVertical\"","description":"A whitespace-delimited string of animation effects that are used when expanding nodes.The supported effects are **\"expandVertical\"** and **\"fadeIn\"**."},{"name":"animation.expand.duration","children":[{"name":"Example - specify a slow expand animation"}],"type":"Number","default":" 200","description":"The number of milliseconds used for the animation when anode is expanded."},{"name":"animation.expand","children":[{"name":"Example - disable expand animation"}],"type":["Boolean","Object"],"description":"The animation that will be used when expanding items."},{"name":"animation.collapse.effects","children":[{"name":"Example - make sub-levels fade out and collapse vertically"}],"type":"String","description":"A whitespace-delimited string of animation effects that are used when collapsing nodes.The supported effects are **fadeOut** and **collapseVertical**."},{"name":"animation.collapse.duration","children":[{"name":"Example - specify a collapse animation duration"}],"type":"Number","default":" 200","description":"The number of milliseconds used for the animation when a node is expanded."},{"name":"animation.collapse","children":[{"name":"Example - disable the collapse animation"}],"type":["Boolean","Object"],"description":"The animation that will be used when collapsing items."},{"name":"animation","children":[{"name":"Example - disable animation of subnodes"}],"type":["Boolean","Object"],"description":"A collection of visual animations used when items are expanded or collapsed through user interaction.Setting this option to **false** will disable all animations."}]}]}